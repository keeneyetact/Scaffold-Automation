function e(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{},n=Object.keys(o);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(o).filter(function(e){return Object.getOwnPropertyDescriptor(o,e).enumerable}))),n.forEach(function(r){t(e,r,o[r])})}return e}function t(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const r=require("util"),o=require("chalk"),n=require("inquirer"),i=require("open"),a=require("ora"),s=require("portscanner"),l=require("scp2"),u=require("webpack"),c=require("webpack-dev-server"),{openPath:p,proxy:d,successCb:m,uploadOpts:f}=require("../config/bruce"),{BUILD_TEXT:g}=require("../i18n"),{HOST:y,IS_REACT:h,PORT:b,AbsPath:q,AsyncTo:j,BuildCb:w,CheckEntry:k,CheckJsType:P,CheckPolyfill:O,GetUrl:S,IsExist:T,ShowInfo:B,ShowMsg:C,ShowTitle:v}=require("../util");module.exports=async function(){if(v("build"),!T("package.json"))return C("red",g.judgePackage);if(!T("node_modules"))return C("red",g.judgeModules);if(!T("src"))return C("red",g.judgeSrc);if(h&&!T("dist/static"))return C("red",g.judgeDll);if(!k())return C("red",g.judgeEntry);if("none"===P())return C("red",g.judgeType);if("ts"===P()&&!T("tsconfig.json"))return C("red",g.judgeTsconfig);const t={analyze:{default:!1,message:g.qaAnalyze,name:"analyze",type:"confirm"},compress:{default:!1,message:g.qaCompress,name:"compress",type:"confirm"},csslint:{default:!1,message:g.qaCsslint,name:"csslint",type:"confirm"},hash:{default:!1,message:g.qaHash,name:"hash",type:"confirm"},jslint:{default:!1,message:g.qaJslint,name:"jslint",type:"confirm"},mode:{choices:g.mode,default:0,message:g.qaMode,name:"mode",type:"list"},open:{default:!1,message:g.qaOpen,name:"open",type:"confirm"},output:{default:!1,message:g.qaOutput,name:"output",type:"confirm"},polyfill:{default:!1,message:g.qaPolyfill,name:"polyfill",type:"confirm"},port:{default:b,message:g.qaPort,name:"port",type:"input",validate:async e=>{const t=+e;return isNaN(t)||t%1!=0?o.redBright(g.judgePort):"open"!==await s.checkPortStatus(t,y)||o.redBright(g.judgeExist(t))}},timed:{default:!1,message:g.qaTimed,name:"timed",type:"confirm"},upload:{default:!1,message:o.redBright(g.qaUpload),name:"upload",type:"confirm"}},E=[t.mode],x=await n.prompt(E);x.mode=g.modeMap[x.mode];const A=x.mode,z=[];1===A?z.push(t.port,t.open,t.csslint,t.jslint):z.push(t.output,!O()&&t.polyfill,t.hash,t.compress,t.timed,t.analyze,t.upload);const F=e({},x,await n.prompt(z.filter(e=>e))),{open:I,port:M,upload:D}=F;if(1===A){const e=require("../config/webpack.dev"),t=u(e(F));new c(t,{contentBase:q("dist"),disableHostCheck:!0,historyApiFallback:!0,host:y,hot:!0,open:!0,overlay:!0,port:M,proxy:d,publicPath:S(M)+"/",quiet:!0}).listen(M,y,e=>{if(e)C("red",g.buildFail);else{const e=S(M,p),t=S(M,p,!0);console.log(o.yellowBright(g.listening)),console.log(g.listLocalhost+o.blueBright(e)),console.log(g.listNetwork+o.blueBright(t)),I&&i(e,{app:"chrome"})}})}else{B(F);const e=require("../config/webpack.prod")(F),[t,o]=await w(e);if(t||!o)C("red",g.buildFail);else if(C("green",g.buildSucceed),D&&m)m(A,e.output.path);else if(D&&f){const e=a(g.uploading),t=r.promisify(l.scp);e.start();const o={2:"testing",3:"production"}[A],[n]=await j(t(q(`dist/${o}`),f(o)));e.stop(),n?(console.log(n),C("red",g.uploadFail)):C("green",g.uploadSucceed)}}};