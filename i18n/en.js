const e=require("chalk"),t=require("figures"),i={desc:`Description:\n${e.blueBright("bruce-cli")} a react application automation build scaffold\nDetails of the document can be found at ${e.yellowBright("https://github.com/JowayYoung/bruce-cli")}`},a={build:"Build Project",dll:"Build The Dynamic Link Library",init:"Initialize Project",lang:"Switch Language",new:"Create Component"},s={1:"Development",2:"Testing",3:"Production"},l={analyze:"Analyze Bundle Result",compress:"Compress File Deeply",hash:"Hash File Name",mode:"Runtime Environment",output:"Output ES6 Code",polyfill:"Dynamic Import Polyfill",project:"Build Project",timed:"Timed Root Directory",upload:"Upload To Server"},r={compName:`${t.radioOn} Component Name: `,compPath:`${t.radioOn} Component Path: `,compProp:`${t.radioOn} Prop Types:     `,initSucceed:`${t.tick} Project was initialized successfully`,installed:`${t.tick} ${e.blueBright("prop-types")} was installed successfully`,installing:`${t.hamburger} ${e.blueBright("prop-types")} is installing......`,newSucceed:`${t.tick} Component was created successfully`},o={buildFail:`${t.cross} Project was built failed`,buildSucceed:`${t.tick} Project was built successfully`,judgeDll:`${t.cross} Please execute ${e.blueBright("bruce dll")} or ${e.blueBright("bruce d")} built the dynamic link library`,judgeExist:i=>`${t.cross} Debug port ${e.blueBright(i)} has been occupied`,judgeModules:`${t.cross} Please execute ${e.blueBright("npm install")} or ${e.blueBright("yarn install")} installed dependencies`,judgePackage:`${t.cross} Please execute ${e.blueBright("npm init")} or ${e.blueBright("yarn init")} initialized ${e.blueBright("package.json")}`,judgePort:`${t.cross} Debug port must be a positive integer`,judgeSrc:`${t.cross} Please execute ${e.blueBright("bruce init")} or ${e.blueBright("bruce i")} initialized project`,judgeTsconfig:`${t.cross} Please initializ ${e.blueBright("tsconfig.json")}`,judgeType:`${t.cross} In order to ensure the standardization of project, JS file extname can only be used either (js/jsx) or (ts/tsx), and${e.blueBright("package.json")} must set useTs (using ts/tsx is set to true, otherwise false)`,listening:`Listening at development environment ${t.pointer}${t.pointer}`,listLocalhost:`${t.radioOn} Localhost: `,listNetwork:`${t.radioOn} Network:   `,mode:["Development","Testing","Production"],modeMap:{Development:1,Testing:2,Production:3},qaAnalyze:"Please confirm whether to analyze bundle result",qaCompress:"Please confirm whether to compress file deeply",qaCsslint:"Please confirm whether to check CSS",qaHash:"Please confirm whether to hash file name",qaJslint:"Please confirm whether to check JS",qaMode:"Please select the build environment",qaOpen:"Please confirm whether to open browser",qaOutput:"Please confirm whether to output ES6 code",qaPolyfill:"Please confirm whether to import polyfill dynamically",qaPort:"Please input debug port",qaTimed:"Please confirm whether to timed root directory",qaUpload:"Please confirm whether to upload to server",uploadFail:`${t.cross} Project was uploaded failed`,uploading:`${t.hamburger} Project is uploading......`,uploadSucceed:`${t.tick} Project was uploaded successfully`},n={dllFail:`${t.cross} The dynamic link library was built failed`,dllSucceed:`${t.tick} The dynamic link library was built successfully`,judgeModules:`${t.cross} Please execute ${e.blueBright("npm install")} or ${e.blueBright("yarn install")} installed dependencies`,judgePackage:`${t.cross} Please execute ${e.blueBright("npm init")} or ${e.blueBright("yarn init")} initialized ${e.blueBright("package.json")}`,judgeVendor:`${t.cross} Project dependencies can't be empty`,qaVendor:"Please select build dependencies"},c={dependencies:["antd","antd-mobile","react-amap","react-beautiful-dnd","react-fastclick","react-hold","react-lazyload","react-loadable","react-pdf","react-placeholder","react-select","react-virtualized"],installed:`${t.tick} Dependencies was installed successfully`,installing:`${t.hamburger} Dependencies is installing......`,judgeExist:`${t.cross} Project already exists, please use other name to create project`,judgeName:`${t.cross} Name can only be composed of numbers, letters, middle scribe`,obtained:`${t.warning} Please execute ${e.blueBright("npm install")} or ${e.blueBright("yarn install")} installed dependencies`,obtaining:`${t.hamburger} Dependencies is obtaining......`,qaDependence:"Please select application dependencies",qaInstall:"Please confirm whether auto install dependencies",qaName:"Please input project name",qaProps:"Please confirm whether to use parameter verification",qaRouter:"Please confirm whether to use page router",qaState:"Please confirm whether to use state management",qaTs:"Please confirm whether to use TypeScript",qaType:"Please select application type"},u={langSucceed:`${t.tick} Language was switched successfully`,qaLanguage:"Please select international language"},d={judgeExist:`${t.cross} Component already exists, please use other name to create component`,judgeModules:`${t.cross} Please execute ${e.blueBright("npm install")} or ${e.blueBright("yarn install")} installed dependencies`,judgeName:`${t.cross} Name can only be composed of numbers, lowercase letters, middle scribe, and the first characters can only be lowercase letters`,judgePackage:`${t.cross} Please execute ${e.blueBright("npm init")} or ${e.blueBright("yarn init")} initialized ${e.blueBright("package.json")}`,judgeSrc:`${t.cross} Please execute ${e.blueBright("bruce init")} or ${e.blueBright("bruce i")} initialized project`,judgeType:`${t.cross} In order to ensure the standardization of project, JS file extname can only be used either (js/jsx) or (ts/tsx), and${e.blueBright("package.json")} must set useTs (using ts/tsx is set to true, otherwise false)`},p=e=>e?"True":"False";module.exports={ACTION_TEXT:a,BUILD_TEXT:o,DLL_TEXT:n,ENV_TEXT:s,GLOB_TEXT:i,INFO_TEXT:l,INIT_TEXT:c,LANG_TEXT:u,NEW_TEXT:d,TEMPLATE_TEXT:r,FormatBool:p};